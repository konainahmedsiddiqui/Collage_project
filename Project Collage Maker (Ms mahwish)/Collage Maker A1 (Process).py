# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ShapeCollage.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QMessageBox
import os
import requests
from PIL import Image, ImageQt
import imghdr
import math
from collage_maker import make_collage


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1006, 602)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.pushButton_2 = QtWidgets.QPushButton(self.frame)
        self.pushButton_2.setGeometry(QtCore.QRect(20, 480, 25, 25))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.frame)
        self.pushButton_3.setGeometry(QtCore.QRect(50, 480, 25, 25))
        self.pushButton_3.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/world.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_3.setIcon(icon)
        self.pushButton_3.setIconSize(QtCore.QSize(13, 13))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.frame)
        self.pushButton_4.setEnabled(False)
        self.pushButton_4.setGeometry(QtCore.QRect(80, 480, 25, 25))
        self.pushButton_4.setObjectName("pushButton_4")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(22, 0, 33, 21))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.frame)
        self.label_2.setGeometry(QtCore.QRect(240, 480, 42, 25))
        self.label_2.setObjectName("label_2")
        self.pushButton_5 = QtWidgets.QPushButton(self.frame)
        self.pushButton_5.setEnabled(False)
        self.pushButton_5.setGeometry(QtCore.QRect(130, 480, 61, 25))
        self.pushButton_5.setObjectName("pushButton_5")
        self.label_3 = QtWidgets.QLabel(self.frame)
        self.label_3.setGeometry(QtCore.QRect(320, 10, 33, 21))
        self.label_3.setObjectName("label_3")
        self.pushButton_7 = QtWidgets.QPushButton(self.frame)
        self.pushButton_7.setEnabled(False)
        self.pushButton_7.setGeometry(QtCore.QRect(590, 40, 41, 25))
        self.pushButton_7.setObjectName("pushButton_7")
        self.progressBar = QtWidgets.QProgressBar(self.frame)
        self.progressBar.setGeometry(QtCore.QRect(370, 430, 211, 23))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setTextVisible(False)
        self.progressBar.setObjectName("progressBar")
        self.pushButton_8 = QtWidgets.QPushButton(self.frame)
        self.pushButton_8.setGeometry(QtCore.QRect(380, 480, 81, 25))
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_9 = QtWidgets.QPushButton(self.frame)
        self.pushButton_9.setEnabled(False)
        self.pushButton_9.setGeometry(QtCore.QRect(490, 480, 81, 25))
        self.pushButton_9.setObjectName("pushButton_9")
        self.tabWidget = QtWidgets.QTabWidget(self.frame)
        self.tabWidget.setGeometry(QtCore.QRect(670, 10, 301, 171))
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.label_4 = QtWidgets.QLabel(self.tab)
        self.label_4.setGeometry(QtCore.QRect(22, 6, 31, 20))
        self.label_4.setObjectName("label_4")
        self.radioButton = QtWidgets.QRadioButton(self.tab)
        self.radioButton.setGeometry(QtCore.QRect(30, 30, 82, 21))
        self.radioButton.setObjectName("radioButton")
        self.radioButton_2 = QtWidgets.QRadioButton(self.tab)
        self.radioButton_2.setGeometry(QtCore.QRect(30, 50, 82, 21))
        self.radioButton_2.setObjectName("radioButton_2")
        self.radioButton_2.setChecked(True)
        self.radioButton_3 = QtWidgets.QRadioButton(self.tab)
        self.radioButton_3.setGeometry(QtCore.QRect(30, 70, 82, 21))
        self.radioButton_3.setObjectName("radioButton_3")
        self.radioButton_4 = QtWidgets.QRadioButton(self.tab)
        self.radioButton_4.setGeometry(QtCore.QRect(30, 90, 82, 21))
        self.radioButton_4.setObjectName("radioButton_4")
        self.radioButton_5 = QtWidgets.QRadioButton(self.tab)
        self.radioButton_5.setGeometry(QtCore.QRect(120, 30, 61, 21))
        self.radioButton_5.setObjectName("radioButton_5")
        self.radioButton_6 = QtWidgets.QRadioButton(self.tab)
        self.radioButton_6.setGeometry(QtCore.QRect(120, 50, 61, 21))
        self.radioButton_6.setObjectName("radioButton_6")
        self.lineEdit = QtWidgets.QLineEdit(self.tab)
        self.lineEdit.setGeometry(QtCore.QRect(180, 30, 51, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.toolButton = QtWidgets.QToolButton(self.tab)
        self.toolButton.setGeometry(QtCore.QRect(240, 30, 25, 21))
        self.toolButton.setObjectName("toolButton")
        self.pushButton_10 = QtWidgets.QPushButton(self.tab)
        self.pushButton_10.setGeometry(QtCore.QRect(180, 60, 71, 71))
        self.pushButton_10.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(172, 172, 172);\n"
"border: 1px solid grey;")
        self.pushButton_10.setText("")
        self.pushButton_10.setObjectName("pushButton_10")
        self.tabWidget.addTab(self.tab, "")
        self.label_5 = QtWidgets.QLabel(self.frame)
        self.label_5.setGeometry(QtCore.QRect(672, 200, 41, 21))
        self.label_5.setObjectName("label_5")
        self.pushButton_11 = QtWidgets.QPushButton(self.frame)
        self.pushButton_11.setGeometry(QtCore.QRect(670, 250, 81, 25))
        self.pushButton_11.setCheckable(True)
        self.pushButton_11.setObjectName("pushButton_11")
        self.buttonGroup = QtWidgets.QButtonGroup(MainWindow)
        self.buttonGroup.setObjectName("buttonGroup")
        self.buttonGroup.addButton(self.pushButton_11)
        self.label_6 = QtWidgets.QLabel(self.frame)
        self.label_6.setGeometry(QtCore.QRect(670, 230, 81, 20))
        self.label_6.setAlignment(QtCore.Qt.AlignCenter)
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.frame)
        self.label_7.setGeometry(QtCore.QRect(770, 230, 41, 21))
        self.label_7.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.frame)
        self.label_8.setGeometry(QtCore.QRect(840, 230, 41, 21))
        self.label_8.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_8.setObjectName("label_8")
        self.comboBox = QtWidgets.QComboBox(self.frame)
        self.comboBox.setGeometry(QtCore.QRect(900, 250, 61, 22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.frame)
        self.lineEdit_2.setGeometry(QtCore.QRect(770, 250, 51, 21))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.frame)
        self.lineEdit_3.setGeometry(QtCore.QRect(840, 250, 51, 21))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.label_9 = QtWidgets.QLabel(self.frame)
        self.label_9.setGeometry(QtCore.QRect(821, 250, 20, 21))
        self.label_9.setAlignment(QtCore.Qt.AlignCenter)
        self.label_9.setObjectName("label_9")
        self.lineEdit_7 = QtWidgets.QLineEdit(self.frame)
        self.lineEdit_7.setGeometry(QtCore.QRect(770, 310, 51, 21))
        self.lineEdit_7.setText("")
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.pushButton_23 = QtWidgets.QPushButton(self.frame)
        self.pushButton_23.setGeometry(QtCore.QRect(670, 310, 81, 25))
        self.pushButton_23.setCheckable(True)
        self.pushButton_23.setObjectName("pushButton_23")
        self.buttonGroup.addButton(self.pushButton_23)
        self.comboBox_3 = QtWidgets.QComboBox(self.frame)
        self.comboBox_3.setGeometry(QtCore.QRect(830, 310, 61, 22))
        self.comboBox_3.setObjectName("comboBox_3")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.label_22 = QtWidgets.QLabel(self.frame)
        self.label_22.setGeometry(QtCore.QRect(670, 290, 81, 20))
        self.label_22.setAlignment(QtCore.Qt.AlignCenter)
        self.label_22.setObjectName("label_22")
        self.pushButton_24 = QtWidgets.QPushButton(self.frame)
        self.pushButton_24.setGeometry(QtCore.QRect(670, 370, 81, 25))
        self.pushButton_24.setCheckable(True)
        self.pushButton_24.setObjectName("pushButton_24")
        self.buttonGroup.addButton(self.pushButton_24)
        self.label_23 = QtWidgets.QLabel(self.frame)
        self.label_23.setGeometry(QtCore.QRect(670, 350, 81, 20))
        self.label_23.setAlignment(QtCore.Qt.AlignCenter)
        self.label_23.setObjectName("label_23")
        self.lineEdit_8 = QtWidgets.QLineEdit(self.frame)
        self.lineEdit_8.setGeometry(QtCore.QRect(790, 370, 51, 21))
        self.lineEdit_8.setText("")
        self.lineEdit_8.setObjectName("lineEdit_8")
        self.radioButton_13 = QtWidgets.QRadioButton(self.frame)
        self.radioButton_13.setGeometry(QtCore.QRect(770, 350, 82, 17))
        self.radioButton_13.setObjectName("radioButton_13")
        self.radioButton_14 = QtWidgets.QRadioButton(self.frame)
        self.radioButton_14.setGeometry(QtCore.QRect(770, 370, 16, 21))
        self.radioButton_14.setText("")
        self.radioButton_14.setObjectName("radioButton_14")
        self.label_24 = QtWidgets.QLabel(self.frame)
        self.label_24.setGeometry(QtCore.QRect(850, 370, 41, 20))
        self.label_24.setAlignment(QtCore.Qt.AlignCenter)
        self.label_24.setObjectName("label_24")
        self.pushButton_25 = QtWidgets.QPushButton(self.frame)
        self.pushButton_25.setGeometry(QtCore.QRect(670, 430, 81, 25))
        self.pushButton_25.setCheckable(True)
        self.pushButton_25.setObjectName("pushButton_25")
        self.buttonGroup.addButton(self.pushButton_25)
        self.label_25 = QtWidgets.QLabel(self.frame)
        self.label_25.setGeometry(QtCore.QRect(670, 410, 81, 20))
        self.label_25.setAlignment(QtCore.Qt.AlignCenter)
        self.label_25.setObjectName("label_25")
        self.horizontalSlider = QtWidgets.QSlider(self.frame)
        self.horizontalSlider.setGeometry(QtCore.QRect(770, 430, 131, 22))
        self.horizontalSlider.setTracking(True)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.pushButton_26 = QtWidgets.QPushButton(self.frame)
        self.pushButton_26.setGeometry(QtCore.QRect(760, 480, 121, 25))
        self.pushButton_26.setObjectName("pushButton_26")
        self.spinBox = QtWidgets.QSpinBox(self.frame)
        self.spinBox.setGeometry(QtCore.QRect(910, 430, 51, 22))
        self.spinBox.setPrefix("")
        self.spinBox.setMaximum(130)
        self.spinBox.setObjectName("spinBox")
        self.frame_2 = QtWidgets.QFrame(self.frame)
        self.frame_2.setGeometry(QtCore.QRect(10, 0, 291, 521))
        self.frame_2.setStyleSheet("    border: 2px solid #e6e6e6;\n"
"")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.listWidget = QtWidgets.QListWidget(self.frame_2)
        self.listWidget.setGeometry(QtCore.QRect(10, 20, 261, 451))
        self.listWidget = QtWidgets.QListWidget(self.frame_2)
        self.listWidget.setGeometry(QtCore.QRect(10, 20, 261, 451))
        self.listWidget.setObjectName("listWidget")
        self.listWidget.setSelectionMode(
            QtWidgets.QAbstractItemView.ExtendedSelection
        )

        self.listWidget.setStyleSheet("QScrollBar:vertical {"
                               "    border: none;"
                               "    background: #f5f5f5;"
                               "    width: 10px;"
                               "    margin: 0px 0 0px 0;"
                               "}"
                               ""
                               "QScrollBar::handle:vertical {"
                               "    background: #555;"
                               "    min-height: 20px;"
                               "}"
                               ""
                               "QScrollBar::add-line:vertical {"
                               "    border: none;"
                               "    background: #f5f5f5;"
                               "    height: 0px;"
                               "    subcontrol-position: bottom;"
                               "    subcontrol-origin: margin;"
                               "}"
                               ""
                               "QScrollBar::sub-line:vertical {"
                               "    border: none;"
                               "    background: #f5f5f5;"
                               "    height: 0px;"
                               "    subcontrol-position: top;"
                               "    subcontrol-origin: margin;"
                               "}")

        self.listWidget.setObjectName("listWidget")
        self.frame_3 = QtWidgets.QFrame(self.frame)
        self.frame_3.setGeometry(QtCore.QRect(310, 0, 341, 521))
        self.frame_3.setStyleSheet("    border: 2px solid #e6e6e6;\n"
"")
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.listWidget_2 = QtWidgets.QListWidget(self.frame_3)
        self.listWidget_2.setGeometry(QtCore.QRect(10, 70, 311, 331))
        self.listWidget_2.setObjectName("listWidget_2")
        self.frame_4 = QtWidgets.QFrame(self.frame)
        self.frame_4.setGeometry(QtCore.QRect(660, 0, 321, 521))
        self.frame_4.setStyleSheet("    border: 2px solid #e6e6e6;\n"
"")
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.line = QtWidgets.QFrame(self.frame)
        self.line.setGeometry(QtCore.QRect(670, 276, 301, 16))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.line_2 = QtWidgets.QFrame(self.frame)
        self.line_2.setGeometry(QtCore.QRect(670, 340, 301, 16))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.line_3 = QtWidgets.QFrame(self.frame)
        self.line_3.setGeometry(QtCore.QRect(670, 400, 301, 16))
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.label_10 = QtWidgets.QLabel(self.frame)
        self.label_10.setGeometry(QtCore.QRect(10, 520, 421, 21))
        self.label_10.setObjectName("label_10")
        self.frame_4.raise_()
        self.frame_3.raise_()
        self.frame_2.raise_()
        self.pushButton_2.raise_()
        self.pushButton_3.raise_()
        self.pushButton_4.raise_()
        self.label.raise_()
        self.label_2.raise_()
        self.pushButton_5.raise_()
        self.label_3.raise_()
        self.pushButton_7.raise_()
        self.progressBar.raise_()
        self.pushButton_8.raise_()
        self.pushButton_9.raise_()
        self.tabWidget.raise_()
        self.label_5.raise_()
        self.pushButton_11.raise_()
        self.label_6.raise_()
        self.label_7.raise_()
        self.label_8.raise_()
        self.comboBox.raise_()
        self.lineEdit_2.raise_()
        self.lineEdit_3.raise_()
        self.label_9.raise_()
        self.lineEdit_7.raise_()
        self.pushButton_23.raise_()
        self.comboBox_3.raise_()
        self.label_22.raise_()
        self.pushButton_24.raise_()
        self.label_23.raise_()
        self.lineEdit_8.raise_()
        self.radioButton_13.raise_()
        self.radioButton_14.raise_()
        self.label_24.raise_()
        self.pushButton_25.raise_()
        self.label_25.raise_()
        self.horizontalSlider.raise_()
        self.pushButton_26.raise_()
        self.spinBox.raise_()
        self.line.raise_()
        self.line_2.raise_()
        self.line_3.raise_()
        self.label_10.raise_()
        self.gridLayout.addWidget(self.frame, 1, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1006, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuProject = QtWidgets.QMenu(self.menubar)
        self.menuProject.setObjectName("menuProject")
        self.menuOptions = QtWidgets.QMenu(self.menubar)
        self.menuOptions.setObjectName("menuOptions")
        self.menuLanguage = QtWidgets.QMenu(self.menuOptions)
        self.menuLanguage.setObjectName("menuLanguage")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionAdd_Photos = QtWidgets.QAction(MainWindow)
        self.actionAdd_Photos.setObjectName("actionAdd_Photos")
        self.actionAdd_Folder = QtWidgets.QAction(MainWindow)
        self.actionAdd_Folder.setObjectName("actionAdd_Folder")
        self.actionAdd_Photos_from_Web = QtWidgets.QAction(MainWindow)
        self.actionAdd_Photos_from_Web.setObjectName("actionAdd_Photos_from_Web")
        self.actionAdd_Collage_As = QtWidgets.QAction(MainWindow)
        self.actionAdd_Collage_As.setEnabled(False)
        self.actionAdd_Collage_As.setObjectName("actionAdd_Collage_As")
        self.actionPrint_Online = QtWidgets.QAction(MainWindow)
        self.actionPrint_Online.setObjectName("actionPrint_Online")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionNew_Project = QtWidgets.QAction(MainWindow)
        self.actionNew_Project.setObjectName("actionNew_Project")
        self.action_Pro_Open_Project = QtWidgets.QAction(MainWindow)
        self.action_Pro_Open_Project.setObjectName("action_Pro_Open_Project")
        self.action_Pro_Save_Project = QtWidgets.QAction(MainWindow)
        self.action_Pro_Save_Project.setObjectName("action_Pro_Save_Project")
        self.actionWatch_Layout_Animation = QtWidgets.QAction(MainWindow)
        self.actionWatch_Layout_Animation.setCheckable(True)
        self.actionWatch_Layout_Animation.setChecked(True)
        self.actionWatch_Layout_Animation.setObjectName("actionWatch_Layout_Animation")
        self.actionDansk_Beta = QtWidgets.QAction(MainWindow)
        self.actionDansk_Beta.setCheckable(True)
        self.actionDansk_Beta.setObjectName("actionDansk_Beta")
        self.actionDeutch = QtWidgets.QAction(MainWindow)
        self.actionDeutch.setCheckable(True)
        self.actionDeutch.setObjectName("actionDeutch")
        self.actionEnglish = QtWidgets.QAction(MainWindow)
        self.actionEnglish.setCheckable(True)
        self.actionEnglish.setObjectName("actionEnglish")
        self.actionFrancais = QtWidgets.QAction(MainWindow)
        self.actionFrancais.setCheckable(True)
        self.actionFrancais.setObjectName("actionFrancais")
        self.actionFran_ais = QtWidgets.QAction(MainWindow)
        self.actionFran_ais.setCheckable(True)
        self.actionFran_ais.setObjectName("actionFran_ais")
        self.actionItaliano = QtWidgets.QAction(MainWindow)
        self.actionItaliano.setCheckable(True)
        self.actionItaliano.setObjectName("actionItaliano")
        self.actionMagyar = QtWidgets.QAction(MainWindow)
        self.actionMagyar.setCheckable(True)
        self.actionMagyar.setObjectName("actionMagyar")
        self.actionNederlands = QtWidgets.QAction(MainWindow)
        self.actionNederlands.setCheckable(True)
        self.actionNederlands.setObjectName("actionNederlands")
        self.actionNorsk = QtWidgets.QAction(MainWindow)
        self.actionNorsk.setCheckable(True)
        self.actionNorsk.setObjectName("actionNorsk")
        self.actionPolski = QtWidgets.QAction(MainWindow)
        self.actionPolski.setCheckable(True)
        self.actionPolski.setObjectName("actionPolski")
        self.actionPortugu_s = QtWidgets.QAction(MainWindow)
        self.actionPortugu_s.setCheckable(True)
        self.actionPortugu_s.setObjectName("actionPortugu_s")
        self.actionRom_n = QtWidgets.QAction(MainWindow)
        self.actionRom_n.setCheckable(True)
        self.actionRom_n.setObjectName("actionRom_n")
        self.actionSuomi = QtWidgets.QAction(MainWindow)
        self.actionSuomi.setCheckable(True)
        self.actionSuomi.setObjectName("actionSuomi")
        self.actionT_rk_e = QtWidgets.QAction(MainWindow)
        self.actionT_rk_e.setCheckable(True)
        self.actionT_rk_e.setObjectName("actionT_rk_e")
        self.action_e_tina = QtWidgets.QAction(MainWindow)
        self.action_e_tina.setCheckable(True)
        self.action_e_tina.setObjectName("action_e_tina")
        self.action_5 = QtWidgets.QAction(MainWindow)
        self.action_5.setCheckable(True)
        self.action_5.setObjectName("action_5")
        self.action_6 = QtWidgets.QAction(MainWindow)
        self.action_6.setCheckable(True)
        self.action_6.setObjectName("action_6")
        self.action_7 = QtWidgets.QAction(MainWindow)
        self.action_7.setCheckable(True)
        self.action_7.setObjectName("action_7")
        self.action_8 = QtWidgets.QAction(MainWindow)
        self.action_8.setCheckable(True)
        self.action_8.setObjectName("action_8")
        self.action_9 = QtWidgets.QAction(MainWindow)
        self.action_9.setCheckable(True)
        self.action_9.setObjectName("action_9")
        self.action_10 = QtWidgets.QAction(MainWindow)
        self.action_10.setCheckable(True)
        self.action_10.setObjectName("action_10")
        self.action_11 = QtWidgets.QAction(MainWindow)
        self.action_11.setCheckable(True)
        self.action_11.setObjectName("action_11")
        self.action_12 = QtWidgets.QAction(MainWindow)
        self.action_12.setCheckable(True)
        self.action_12.setObjectName("action_12")
        self.actionShape_Collage_Help = QtWidgets.QAction(MainWindow)
        self.actionShape_Collage_Help.setObjectName("actionShape_Collage_Help")
        self.actionExamples = QtWidgets.QAction(MainWindow)
        self.actionExamples.setObjectName("actionExamples")
        self.actionUpgrade_to_Shape_Collage_Pro = QtWidgets.QAction(MainWindow)
        self.actionUpgrade_to_Shape_Collage_Pro.setObjectName("actionUpgrade_to_Shape_Collage_Pro")
        self.actionCheck_for_Updates = QtWidgets.QAction(MainWindow)
        self.actionCheck_for_Updates.setObjectName("actionCheck_for_Updates")
        self.actionAbout_Shape_Collage = QtWidgets.QAction(MainWindow)
        self.actionAbout_Shape_Collage.setObjectName("actionAbout_Shape_Collage")
        self.menuFile.addAction(self.actionAdd_Photos)
        self.menuFile.addAction(self.actionAdd_Folder)
        self.menuFile.addAction(self.actionAdd_Photos_from_Web)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionAdd_Collage_As)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionPrint_Online)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuProject.addAction(self.actionNew_Project)
        self.menuProject.addAction(self.action_Pro_Open_Project)
        self.menuProject.addAction(self.action_Pro_Save_Project)
        self.menuLanguage.addAction(self.actionDansk_Beta)
        self.menuLanguage.addAction(self.actionDeutch)
        self.menuLanguage.addAction(self.actionEnglish)
        self.menuLanguage.addAction(self.actionFrancais)
        self.menuLanguage.addAction(self.actionFran_ais)
        self.menuLanguage.addAction(self.actionItaliano)
        self.menuLanguage.addAction(self.actionMagyar)
        self.menuLanguage.addAction(self.actionNederlands)
        self.menuLanguage.addAction(self.actionNorsk)
        self.menuLanguage.addAction(self.actionPolski)
        self.menuLanguage.addAction(self.actionPortugu_s)
        self.menuLanguage.addAction(self.actionRom_n)
        self.menuLanguage.addAction(self.actionSuomi)
        self.menuLanguage.addAction(self.actionT_rk_e)
        self.menuLanguage.addAction(self.action_e_tina)
        self.menuLanguage.addAction(self.action_5)
        self.menuLanguage.addAction(self.action_6)
        self.menuLanguage.addAction(self.action_7)
        self.menuLanguage.addAction(self.action_8)
        self.menuLanguage.addAction(self.action_9)
        self.menuLanguage.addAction(self.action_10)
        self.menuLanguage.addAction(self.action_11)
        self.menuLanguage.addAction(self.action_12)
        self.menuOptions.addAction(self.menuLanguage.menuAction())
        self.menuOptions.addSeparator()
        self.menuOptions.addAction(self.actionWatch_Layout_Animation)
        self.menuHelp.addAction(self.actionShape_Collage_Help)
        self.menuHelp.addAction(self.actionExamples)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionUpgrade_to_Shape_Collage_Pro)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionCheck_for_Updates)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionAbout_Shape_Collage)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuProject.menuAction())
        self.menubar.addAction(self.menuOptions.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.label_2.setText(f"{self.listWidget.count()} images selected")

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)



        # Set up hover text for buttons (TOOLTIP)
        #self.pushButton_2.setToolTip("Button 2")
        #self.pushButton_3.setToolTip("Button 3")
        #self.pushButton_4.setToolTip("Button 4")
        #self.pushButton_5.setToolTip("Button 5")


        # Connect hover events for buttons
        self.pushButton_2.enterEvent = lambda event: self.label_10.setText("Add photos for the collage")
        self.pushButton_2.leaveEvent = lambda event: self.label_10.setText("")
        self.pushButton_3.enterEvent = lambda event: self.label_10.setText("Add photos from the web for the collage")
        self.pushButton_3.leaveEvent = lambda event: self.label_10.setText("")
        self.pushButton_4.enterEvent = lambda event: self.label_10.setText("Remove the selected photos from the photo list (you can also press the delete key)")
        self.pushButton_4.leaveEvent = lambda event: self.label_10.setText("")
        self.pushButton_5.enterEvent = lambda event: self.label_10.setText("Remove all photos from the photo list")
        self.pushButton_5.leaveEvent = lambda event: self.label_10.setText("")

        # Create a shortcut object to listen for DELETE key press events
        shortcut = QtWidgets.QShortcut(QtGui.QKeySequence(QtCore.Qt.Key_Delete), self.listWidget)

        # Connect the shortcut to the remove_images() function
        shortcut.activated.connect(self.remove_images)

        # Enable drag and drop for the QListWidget
        self.listWidget.setAcceptDrops(True)

        # Connect signals for drag and drop events (IMAGES)
        self.listWidget.dragEnterEvent = self.drag_enter_event
        self.listWidget.dragMoveEvent = self.drag_move_event
        self.listWidget.dropEvent = self.drop_event

        # Connect signals to slots
        self.pushButton_2.clicked.connect(self.select_images)
        self.pushButton_3.clicked.connect(self.browse_online_images)
        self.pushButton_4.clicked.connect(self.remove_images)
        self.listWidget.itemChanged.connect(self.update_remove_button)
        self.pushButton_5.clicked.connect(self.clear_list)
        self.listWidget.itemChanged.connect(self.update_clear_button)
        
        # Connect pushButton_8 to the generate_collage_and_display slot
        self.pushButton_8.clicked.connect(self.generate_collage)

        self.actionAdd_Photos.triggered.connect(self.add_photos)
        self.actionAdd_Folder.triggered.connect(self.add_folder)
        self.actionAdd_Photos_from_Web.triggered.connect(self.add_online_images)
        self.actionAdd_Collage_As.triggered.connect(self.save_collage)

        # create a Print Online action
        self.actionPrint_Online.setShortcut('Ctrl+P')
        self.actionPrint_Online.triggered.connect(self.print_online)

        # Add Exit action to File menu
        self.actionExit.triggered.connect(self.exit_app)

    def generate_collage(self):
            # Get selected shape
            shape = self.get_selected_shape()

            # Get images from list widget
            images = []
            for index in range(self.listWidget.count()):
                item = self.listWidget.item(index)
                image_path = item.data(Qt.UserRole)
                if image_path is None or not os.path.isfile(image_path) or not os.access(image_path, os.R_OK):
                    # Skip items with empty or invalid image paths
                    continue
                format = imghdr.what(image_path)
                if format is None:
                    print(f"Error: unsupported image format for file '{image_path}'")
                else:
                    print(f"Opening image file '{image_path}' with format '{format}'")
                    image = Image.open(image_path)
                    images.append(image)

            # Generate collage
            if len(images) > 0:
                collage_image = self.generate_image_collage(shape, images)
                if collage_image is not None:
                    # Clear previous items from listWidget_2
                    self.listWidget_2.clear()
                    # Add the collage image to listWidget_2
                    self.add_image_to_list_widget(collage_image, self.listWidget_2)
                    # Draw shape over the collage
                    if shape == "Rectangle":
                        draw.rectangle((0, 0, collage_image.width, collage_image.height), outline=border_color, width=border_width)
                    elif shape == "Grid":
                        grid_size = min(n_rows, n_cols)
                        cell_width = width // grid_size
                        cell_height = height // grid_size
                        for i in range(1, grid_size):
                            x = i * cell_width
                            y = i * cell_height
                            draw.line((x, 0, x, height), fill=border_color, width=border_width)
                            draw.line((0, y, width, y), fill=border_color, width=border_width)
                    elif shape == "Heart":
                        heart_size = min(collage_image.width, collage_image.height) // 2
                        heart_center = (collage_image.width // 2, collage_image.height // 2)
                        heart_points = [
                            (heart_center[0] - heart_size, heart_center[1] - heart_size),
                            (heart_center[0], heart_center[1] - heart_size // 2),
                            (heart_center[0] + heart_size, heart_center[1] - heart_size),
                            (heart_center[0] + heart_size, heart_center[1] + heart_size),
                            (heart_center[0], heart_center[1] + heart_size // 2),
                            (heart_center[0] - heart_size, heart_center[1] + heart_size)
                        ]
                        draw.polygon(heart_points, outline=border_color, width=border_width)
                    elif shape == "Circle":
                        circle_radius = min(collage_image.width, collage_image.height) // 2
                        circle_center = (collage_image.width // 2, collage_image.height // 2)
                        draw.ellipse((circle_center[0] - circle_radius, circle_center[1] - circle_radius,
                                      circle_center[0] + circle_radius, circle_center[1] + circle_radius),
                                      outline=border_color, width=border_width)
            else:
                print("Error: no images found")

    def create_collage(self, images, shape):
        # Calculate number of rows and columns based on number of images and shape
        n_images = len(images)
        if shape == "Rectangle":
                n_cols = int(n_images ** 0.5)
                n_rows = (n_images + n_cols - 1) // n_cols
        elif shape == "Grid":
                n_cols = n_rows = int(n_images ** 0.5)
        elif shape == "Heart":
                n_cols = n_rows = int(n_images ** 0.5)
        elif shape == "Circle":
                n_cols = n_rows = int(n_images ** 0.5)

        # Calculate size of each image
        image_width, image_height = images[0].size
        collage_width = image_width * n_cols
        collage_height = image_height * n_rows

        # Create blank collage image
        collage = Image.new("RGB", (collage_width, collage_height), (255, 255, 255))

        # Draw images onto collage
        draw = ImageDraw.Draw(collage)

        for index, image in enumerate(images):
                row = index // n_cols
                col = index % n_cols
                x = col * image_width
                y = row * image_height
                collage.paste(image, (x, y))

                return collage

    def get_selected_shape(self):
        if self.radioButton.isChecked():
            return "Rectangle"
        elif self.radioButton_2.isChecked():
            return "Grid"
        elif self.radioButton_3.isChecked():
            return "Heart"
        elif self.radioButton_4.isChecked():
            return "Circle"
        else:
            return

        # Draw shape over the collage
        if shape == "Rectangle":
            draw.rectangle((0, 0, width, height), outline=border_color, width=border_width)
        elif shape == "Grid":
            grid_size = min(n_rows, n_cols)
            cell_width = width // grid_size
            cell_height = height // grid_size
            for i in range(1, grid_size):
                x = i * cell_width
                y = i * cell_height
                draw.line((x, 0, x, height), fill=border_color, width=border_width)
                draw.line((0, y, width, y), fill=border_color, width=border_width)
        elif shape == "Heart":
            heart_size = min(width, height) // 2
            heart_center = (width // 2, height // 2)
            heart_points = [
                (heart_center[0] - heart_size, heart_center[1] - heart_size),
                (heart_center[0], heart_center[1] - heart_size // 2),
                (heart_center[0] + heart_size, heart_center[1] - heart_size),
                (heart_center[0] + heart_size, heart_center[1] + heart_size),
                (heart_center[0], heart_center[1] + heart_size // 2),
                (heart_center[0] - heart_size, heart_center[1] + heart_size)
            ]
            draw.polygon(heart_points, outline=border_color, width=border_width)
        elif shape == "Circle":
            circle_radius = min(width, height) // 2
            circle_center = (width // 2, height // 2)
            draw.ellipse((circle_center[0] - circle_radius, circle_center[1] - circle_radius,
                          circle_center[0] + circle_radius, circle_center[1] + circle_radius),
                          outline=border_color, width=border_width)

        # Convert image to QPixmap and add to second QListWidget
        pixmap = QPixmap.fromImage(ImageQt(image))
        item = QListWidgetItem(QIcon(pixmap), '', qlistwidget)
        item.setSizeHint(QSize(image_width, image_height))

        return collage


    def print_online(self):
        # code for the Print Online function
        pass

    def exit_app(self):
        QtWidgets.QApplication.quit()

    def add_online_images(self):
            # Get image URL from user input
            url, ok = QtWidgets.QInputDialog.getText(self.centralwidget, 'Enter Image URL', 'URL:')
            if ok and url:
                # Download image from URL
                pixmap = QtGui.QPixmap()
                pixmap.loadFromData(requests.get(url).content)
                item = QtWidgets.QListWidgetItem(QtGui.QIcon(pixmap), '', self.listWidget)
                item.setSizeHint(QtCore.QSize(100, 100))
                item.setFlags(item.flags() | QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsDragEnabled)
                self.update_image_count()        


    def add_folder(self):
            # Open file dialog to select a folder
            file_dialog = QtWidgets.QFileDialog()
            file_dialog.setFileMode(QtWidgets.QFileDialog.Directory)
            if file_dialog.exec_():
                dir_name = file_dialog.selectedFiles()[0]
                self.images = []
                for file_name in os.listdir(dir_name):
                    file_path = os.path.join(dir_name, file_name)
                    if os.path.isfile(file_path) and imghdr.what(file_path) is not None:
                        image = Image.open(file_path)
                        pixmap = QtGui.QPixmap(file_path)
                        self.images.append(pixmap)
                        item = QtWidgets.QListWidgetItem(QtGui.QIcon(pixmap), '', self.listWidget)
                        item.setText(file_name)  # set the name of the file as the text of the item
                        item.setSizeHint(QtCore.QSize(100, 120))  # increase the height to accomodate the text
                        item.setFlags(item.flags() | QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsDragEnabled)
                        self.listWidget.setViewMode(QtWidgets.QListWidget.IconMode)  # set the view mode to icon mode
                        self.listWidget.setIconSize(QtCore.QSize(100, 100))  # set the size of the icons
                        self.listWidget.setResizeMode(QtWidgets.QListWidget.Adjust)  # adjust the size of the items to the available space
                        self.listWidget.setWrapping(True)  # allow wrapping of items to multiple rows
                        self.update_image_count()        


    def add_photos(self):
            # Open file dialog to select images
            file_dialog = QtWidgets.QFileDialog()
            file_dialog.setFileMode(QtWidgets.QFileDialog.ExistingFiles)
            if file_dialog.exec_():
                file_names = file_dialog.selectedFiles()
                self.images = [QtGui.QPixmap(name) for name in file_names]
                for name, pixmap in zip(file_names, self.images):
                        item = QtWidgets.QListWidgetItem(QtGui.QIcon(pixmap), '', self.listWidget)
                        item.setText(os.path.basename(name))  # set the name of the file as the text of the item
                        item.setSizeHint(QtCore.QSize(100, 120))  # increase the height to accomodate the text
                        item.setFlags(item.flags() | QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsDragEnabled)
                        self.listWidget.setViewMode(QtWidgets.QListWidget.IconMode)  # set the view mode to icon mode
                        self.listWidget.setIconSize(QtCore.QSize(100, 100))  # set the size of the icons
                        self.listWidget.setResizeMode(QtWidgets.QListWidget.Adjust)  # adjust the size of the items to the available space
                        self.listWidget.setWrapping(True)  # allow wrapping of items to multiple rows
                        self.update_image_count()


    def update_image_count(self):
        self.label_2.setText(f"{self.listWidget.count()} images selected")

    def drag_enter_event(self, event):
        if event.mimeData().hasUrls():
            event.accept()
        else:
            event.ignore()
        self.update_image_count()    


    def drag_move_event(self, event):
        if event.mimeData().hasUrls():
            event.setDropAction(QtCore.Qt.CopyAction)
            event.accept()
        else:
            event.ignore()
        self.update_image_count()    


    def drop_event(self, event):
            if event.mimeData().hasUrls():
                event.setDropAction(QtCore.Qt.CopyAction)
                event.accept()
                for url in event.mimeData().urls():
                    file_path = url.toLocalFile()
                    if os.path.isfile(file_path):
                        # Load image file and add to list
                        pixmap = QtGui.QPixmap(file_path)
                        item = QtWidgets.QListWidgetItem(QtGui.QIcon(pixmap), '', self.listWidget)
                        item.setText(os.path.basename(file_path))  # set the name of the file as the text of the item
                        item.setSizeHint(QtCore.QSize(100, 120))  # increase the height to accomodate the text
                        item.setFlags(item.flags() | QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsDragEnabled)
                    elif os.path.isdir(file_path):
                        # Recursively add all image files in the directory
                        for root, dirs, files in os.walk(file_path):
                            for file in files:
                                if imghdr.what(os.path.join(root, file)):
                                    pixmap = QtGui.QPixmap(os.path.join(root, file))
                                    item = QtWidgets.QListWidgetItem(QtGui.QIcon(pixmap), '', self.listWidget)
                                    item.setText(os.path.basename(file))  # set the name of the file as the text of the item
                                    item.setSizeHint(QtCore.QSize(100, 120))  # increase the height to accomodate the text
                                    item.setFlags(item.flags() | QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsDragEnabled)
                    else:
                        event.ignore()
            self.update_image_count() 
            self.update_save_collage()  
 

    def select_images(self):
            # Open file dialog to select images
            file_dialog = QtWidgets.QFileDialog()
            file_dialog.setFileMode(QtWidgets.QFileDialog.ExistingFiles)
            if file_dialog.exec_():
                file_names = file_dialog.selectedFiles()
                self.images = [QtGui.QPixmap(name) for name in file_names]
                for name, pixmap in zip(file_names, self.images):
                    item = QtWidgets.QListWidgetItem(QtGui.QIcon(pixmap), '', self.listWidget)
                    item.setText(os.path.basename(name))  # set the name of the file as the text of the item
                    item.setSizeHint(QtCore.QSize(100, 120))  # increase the height to accomodate the text
                    item.setFlags(item.flags() | QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsDragEnabled)
                self.listWidget.setViewMode(QtWidgets.QListWidget.IconMode)  # set the view mode to icon mode
                self.listWidget.setIconSize(QtCore.QSize(100, 100))  # set the size of the icons
                self.listWidget.setResizeMode(QtWidgets.QListWidget.Adjust)  # adjust the size of the items to the available space
                self.listWidget.setWrapping(True)  # allow wrapping of items to multiple rows
                self.update_image_count()  
                self.update_save_collage()  


    def browse_online_images(self):
            # Get image URL from user input
            url, ok = QtWidgets.QInputDialog.getText(self.centralwidget, 'Enter Image URL', 'URL:')
            if ok and url:
                # Download image from URL
                pixmap = QtGui.QPixmap()
                pixmap.loadFromData(requests.get(url).content)
                item = QtWidgets.QListWidgetItem(QtGui.QIcon(pixmap), '', self.listWidget)
                item.setSizeHint(QtCore.QSize(100, 100))
                item.setFlags(item.flags() | QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsDragEnabled)
                self.update_image_count()
                self.update_save_collage()  
    

    def remove_images(self):
            # Get selected items in QListWidget
            selected_items = self.listWidget.selectedItems()

            # Remove each selected item
            for item in selected_items:
                self.listWidget.takeItem(self.listWidget.row(item))
                self.update_image_count()
                self.update_save_collage()  
    


    def update_remove_button(self):
                if self.listWidget.count() > 0:
                    self.pushButton_4.setEnabled(True)
                else:
                    self.pushButton_4.setEnabled(False)    

    def clear_list(self):
        msg_box = QMessageBox(self.centralwidget)
        msg_box.setIcon(QMessageBox.Question)
        msg_box.setWindowTitle("Confirmation")
        msg_box.setText("Are you sure you want to delete all the photos from the list?")
        msg_box.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
        msg_box.setDefaultButton(QMessageBox.No)
        button = msg_box.exec_()
        if button == QMessageBox.Yes:
            self.listWidget.clear()
            self.pushButton_5.setEnabled(False)
            self.update_image_count()   
  

    def update_clear_button(self):
                if self.listWidget.count() > 0:
                    self.pushButton_5.setEnabled(True)
                else:
                    self.pushButton_5.setEnabled(False)                                

    def save_collage(self):
            # Save collage to file
            supported_image_formats = [
                'JPEG (*.jpg *.jpeg *.jpe)',
                'PNG (*.png)',
                'Photoshop (*.psd)',
                'Photoshop Large Document Format (*.psb)',
            ]
            file_dialog = QtWidgets.QFileDialog()
            file_dialog.setDefaultSuffix('png')
            file_name, filter = file_dialog.getSaveFileName(filter=";;".join(supported_image_formats))
            if file_name:
                pixmap = self.canvas.pixmap()
                if filter == supported_image_formats[0]:
                    pixmap.save(file_name, 'JPEG')
                elif filter == supported_image_formats[1]:
                    pixmap.save(file_name, 'PNG')
                elif filter == supported_image_formats[2]:
                    pixmap.save(file_name, 'PSD')
                elif filter == supported_image_formats[3]:
                    pixmap.save(file_name, 'PSB')

    def update_save_collage(self):
        if self.listWidget.count() > 0:
            self.actionAdd_Collage_As.setEnabled(True)
        else:
            self.actionAdd_Collage_As.setEnabled(False)       

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Shape Collage Pro"))
        self.pushButton_2.setText(_translate("MainWindow", "+"))
        self.pushButton_4.setText(_translate("MainWindow", "-"))
        self.label.setText(_translate("MainWindow", "Photos"))
        self.label_2.setText(_translate("MainWindow", "0 Photos"))
        self.pushButton_5.setText(_translate("MainWindow", "Clear List"))
        self.label_3.setText(_translate("MainWindow", "Status"))
        self.pushButton_7.setText(_translate("MainWindow", "Edit"))
        self.pushButton_8.setText(_translate("MainWindow", "Create"))
        self.pushButton_9.setText(_translate("MainWindow", "Save"))
        self.label_4.setText(_translate("MainWindow", "Shape"))
        self.radioButton.setText(_translate("MainWindow", "Rectangle"))
        self.radioButton_2.setText(_translate("MainWindow", "Grid"))
        self.radioButton_3.setText(_translate("MainWindow", "Heart"))
        self.radioButton_4.setText(_translate("MainWindow", "Circle"))
        self.radioButton_5.setText(_translate("MainWindow", "Text"))
        self.radioButton_6.setText(_translate("MainWindow", "More"))
        self.toolButton.setText(_translate("MainWindow", "..."))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Shape and Size"))
        self.label_5.setText(_translate("MainWindow", "Size"))
        self.pushButton_11.setText(_translate("MainWindow", "Auto"))
        self.label_6.setText(_translate("MainWindow", "Collage Size:"))
        self.label_7.setText(_translate("MainWindow", "Width"))
        self.label_8.setText(_translate("MainWindow", "Height"))
        self.comboBox.setItemText(0, _translate("MainWindow", "pixels"))
        self.comboBox.setItemText(1, _translate("MainWindow", "inches"))
        self.comboBox.setItemText(2, _translate("MainWindow", "cm"))
        self.label_9.setText(_translate("MainWindow", "x"))
        self.pushButton_23.setText(_translate("MainWindow", "Manual"))
        self.comboBox_3.setItemText(0, _translate("MainWindow", "pixels"))
        self.comboBox_3.setItemText(1, _translate("MainWindow", "inches"))
        self.comboBox_3.setItemText(2, _translate("MainWindow", "cm"))
        self.label_22.setText(_translate("MainWindow", "Photo Size:"))
        self.pushButton_24.setText(_translate("MainWindow", "Manual"))
        self.label_23.setText(_translate("MainWindow", "# Photos:"))
        self.radioButton_13.setText(_translate("MainWindow", "All"))
        self.label_24.setText(_translate("MainWindow", "photos"))
        self.pushButton_25.setText(_translate("MainWindow", "Manual"))
        self.label_25.setText(_translate("MainWindow", "Photo Spacing:"))
        self.pushButton_26.setText(_translate("MainWindow", "Reset Settings"))
        self.spinBox.setSuffix(_translate("MainWindow", "%"))
        self.label_10.setText(_translate("MainWindow", ""))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuProject.setTitle(_translate("MainWindow", "Project"))
        self.menuOptions.setTitle(_translate("MainWindow", "Options"))
        self.menuLanguage.setTitle(_translate("MainWindow", "Language"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.actionAdd_Photos.setText(_translate("MainWindow", "Add Photos"))
        self.actionAdd_Folder.setText(_translate("MainWindow", "Add Folder"))
        self.actionAdd_Photos_from_Web.setText(_translate("MainWindow", "Add Photos from Web"))
        self.actionAdd_Collage_As.setText(_translate("MainWindow", "Save Collage As..."))
        self.actionPrint_Online.setText(_translate("MainWindow", "Print Online"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionNew_Project.setText(_translate("MainWindow", "New Project"))
        self.action_Pro_Open_Project.setText(_translate("MainWindow", "(Pro) Open Project"))
        self.action_Pro_Save_Project.setText(_translate("MainWindow", "(Pro) Save Project"))
        self.actionWatch_Layout_Animation.setText(_translate("MainWindow", "Watch layout animation"))
        self.actionDansk_Beta.setText(_translate("MainWindow", "Dansk (Beta)"))
        self.actionDeutch.setText(_translate("MainWindow", "Deutch"))
        self.actionEnglish.setText(_translate("MainWindow", "English"))
        self.actionFrancais.setText(_translate("MainWindow", "Español"))
        self.actionFran_ais.setText(_translate("MainWindow", "Français"))
        self.actionItaliano.setText(_translate("MainWindow", "Italiano"))
        self.actionMagyar.setText(_translate("MainWindow", "Magyar"))
        self.actionNederlands.setText(_translate("MainWindow", "Nederlands"))
        self.actionNorsk.setText(_translate("MainWindow", "Norsk"))
        self.actionPolski.setText(_translate("MainWindow", "Polski"))
        self.actionPortugu_s.setText(_translate("MainWindow", "Português"))
        self.actionRom_n.setText(_translate("MainWindow", "Română"))
        self.actionSuomi.setText(_translate("MainWindow", "Suomi"))
        self.actionT_rk_e.setText(_translate("MainWindow", "Türkçe"))
        self.action_e_tina.setText(_translate("MainWindow", "Čeština"))
        self.action_5.setText(_translate("MainWindow", "Ελληνικά"))
        self.action_6.setText(_translate("MainWindow", "Русский"))
        self.action_7.setText(_translate("MainWindow", "ภาษาไทย"))
        self.action_8.setText(_translate("MainWindow", " 中文 (简体)"))
        self.action_9.setText(_translate("MainWindow", "中文 (繁體)"))
        self.action_10.setText(_translate("MainWindow", "한국어"))
        self.action_11.setText(_translate("MainWindow", "עברית"))
        self.action_12.setText(_translate("MainWindow", "فارسی "))
        self.actionShape_Collage_Help.setText(_translate("MainWindow", "Shape Collage Help"))
        self.actionExamples.setText(_translate("MainWindow", "Examples"))
        self.actionUpgrade_to_Shape_Collage_Pro.setText(_translate("MainWindow", "Upgrade to Shape Collage Pro"))
        self.actionCheck_for_Updates.setText(_translate("MainWindow", "Check for Updates"))
        self.actionAbout_Shape_Collage.setText(_translate("MainWindow", "About Shape Collage"))
import icons_rc


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
